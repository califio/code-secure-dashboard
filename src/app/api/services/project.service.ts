/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMember } from '../fn/project/add-member';
import { AddMember$Params } from '../fn/project/add-member';
import { deleteProjectMember } from '../fn/project/delete-project-member';
import { DeleteProjectMember$Params } from '../fn/project/delete-project-member';
import { getProjectCommits } from '../fn/project/get-project-commits';
import { GetProjectCommits$Params } from '../fn/project/get-project-commits';
import { getProjectFindings } from '../fn/project/get-project-findings';
import { GetProjectFindings$Params } from '../fn/project/get-project-findings';
import { getProjectInfo } from '../fn/project/get-project-info';
import { GetProjectInfo$Params } from '../fn/project/get-project-info';
import { getProjectPackages } from '../fn/project/get-project-packages';
import { GetProjectPackages$Params } from '../fn/project/get-project-packages';
import { getProjects } from '../fn/project/get-projects';
import { GetProjects$Params } from '../fn/project/get-projects';
import { getProjectScanners } from '../fn/project/get-project-scanners';
import { GetProjectScanners$Params } from '../fn/project/get-project-scanners';
import { getProjectScans } from '../fn/project/get-project-scans';
import { GetProjectScans$Params } from '../fn/project/get-project-scans';
import { getProjectStatistic } from '../fn/project/get-project-statistic';
import { GetProjectStatistic$Params } from '../fn/project/get-project-statistic';
import { getProjectUsers } from '../fn/project/get-project-users';
import { GetProjectUsers$Params } from '../fn/project/get-project-users';
import { ProjectCommitSummary } from '../models/project-commit-summary';
import { ProjectFindingPage } from '../models/project-finding-page';
import { ProjectInfo } from '../models/project-info';
import { ProjectPackagePage } from '../models/project-package-page';
import { ProjectScanner } from '../models/project-scanner';
import { ProjectScanPage } from '../models/project-scan-page';
import { ProjectStatistics } from '../models/project-statistics';
import { ProjectSummaryPage } from '../models/project-summary-page';
import { ProjectUser } from '../models/project-user';
import { ProjectUserPage } from '../models/project-user-page';
import { updateProjectMember } from '../fn/project/update-project-member';
import { UpdateProjectMember$Params } from '../fn/project/update-project-member';

@Injectable({ providedIn: 'root' })
export class ProjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProjects()` */
  static readonly GetProjectsPath = '/api/project';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjects()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjects$Response(params?: GetProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectSummaryPage>> {
    return getProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjects$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjects(params?: GetProjects$Params, context?: HttpContext): Observable<ProjectSummaryPage> {
    return this.getProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectSummaryPage>): ProjectSummaryPage => r.body)
    );
  }

  /** Path part for operation `getProjectInfo()` */
  static readonly GetProjectInfoPath = '/api/project/{slug}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectInfo$Response(params: GetProjectInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectInfo>> {
    return getProjectInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectInfo(params: GetProjectInfo$Params, context?: HttpContext): Observable<ProjectInfo> {
    return this.getProjectInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectInfo>): ProjectInfo => r.body)
    );
  }

  /** Path part for operation `getProjectStatistic()` */
  static readonly GetProjectStatisticPath = '/api/project/{slug}/statistic';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectStatistic()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectStatistic$Response(params: GetProjectStatistic$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectStatistics>> {
    return getProjectStatistic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectStatistic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectStatistic(params: GetProjectStatistic$Params, context?: HttpContext): Observable<ProjectStatistics> {
    return this.getProjectStatistic$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectStatistics>): ProjectStatistics => r.body)
    );
  }

  /** Path part for operation `getProjectCommits()` */
  static readonly GetProjectCommitsPath = '/api/project/{slug}/commit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectCommits()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectCommits$Response(params: GetProjectCommits$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectCommitSummary>>> {
    return getProjectCommits(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectCommits$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectCommits(params: GetProjectCommits$Params, context?: HttpContext): Observable<Array<ProjectCommitSummary>> {
    return this.getProjectCommits$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectCommitSummary>>): Array<ProjectCommitSummary> => r.body)
    );
  }

  /** Path part for operation `getProjectScanners()` */
  static readonly GetProjectScannersPath = '/api/project/{slug}/scanner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectScanners()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectScanners$Response(params: GetProjectScanners$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectScanner>>> {
    return getProjectScanners(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectScanners$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectScanners(params: GetProjectScanners$Params, context?: HttpContext): Observable<Array<ProjectScanner>> {
    return this.getProjectScanners$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectScanner>>): Array<ProjectScanner> => r.body)
    );
  }

  /** Path part for operation `getProjectScans()` */
  static readonly GetProjectScansPath = '/api/project/{slug}/scan/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectScans()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectScans$Response(params: GetProjectScans$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectScanPage>> {
    return getProjectScans(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectScans$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectScans(params: GetProjectScans$Params, context?: HttpContext): Observable<ProjectScanPage> {
    return this.getProjectScans$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectScanPage>): ProjectScanPage => r.body)
    );
  }

  /** Path part for operation `getProjectFindings()` */
  static readonly GetProjectFindingsPath = '/api/project/{slug}/finding/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectFindings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectFindings$Response(params: GetProjectFindings$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectFindingPage>> {
    return getProjectFindings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectFindings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectFindings(params: GetProjectFindings$Params, context?: HttpContext): Observable<ProjectFindingPage> {
    return this.getProjectFindings$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectFindingPage>): ProjectFindingPage => r.body)
    );
  }

  /** Path part for operation `getProjectPackages()` */
  static readonly GetProjectPackagesPath = '/api/project/{slug}/package/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectPackages()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectPackages$Response(params: GetProjectPackages$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectPackagePage>> {
    return getProjectPackages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectPackages$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectPackages(params: GetProjectPackages$Params, context?: HttpContext): Observable<ProjectPackagePage> {
    return this.getProjectPackages$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectPackagePage>): ProjectPackagePage => r.body)
    );
  }

  /** Path part for operation `getProjectUsers()` */
  static readonly GetProjectUsersPath = '/api/project/{slug}/member/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectUsers()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectUsers$Response(params: GetProjectUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectUserPage>> {
    return getProjectUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectUsers$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectUsers(params: GetProjectUsers$Params, context?: HttpContext): Observable<ProjectUserPage> {
    return this.getProjectUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectUserPage>): ProjectUserPage => r.body)
    );
  }

  /** Path part for operation `addMember()` */
  static readonly AddMemberPath = '/api/project/{slug}/member';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMember$Response(params: AddMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectUser>> {
    return addMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMember(params: AddMember$Params, context?: HttpContext): Observable<ProjectUser> {
    return this.addMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectUser>): ProjectUser => r.body)
    );
  }

  /** Path part for operation `updateProjectMember()` */
  static readonly UpdateProjectMemberPath = '/api/project/{slug}/member/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProjectMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectMember$Response(params: UpdateProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectUser>> {
    return updateProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProjectMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectMember(params: UpdateProjectMember$Params, context?: HttpContext): Observable<ProjectUser> {
    return this.updateProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectUser>): ProjectUser => r.body)
    );
  }

  /** Path part for operation `deleteProjectMember()` */
  static readonly DeleteProjectMemberPath = '/api/project/{slug}/member/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProjectMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectMember$Response(params: DeleteProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProjectMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectMember(params: DeleteProjectMember$Params, context?: HttpContext): Observable<void> {
    return this.deleteProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
