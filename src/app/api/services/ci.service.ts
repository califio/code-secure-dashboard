/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CiScanInfo } from '../models/ci-scan-info';
import { CiUploadDependencyResponse } from '../models/ci-upload-dependency-response';
import { CiUploadFindingResponse } from '../models/ci-upload-finding-response';
import { initCiScan } from '../fn/ci/init-ci-scan';
import { InitCiScan$Params } from '../fn/ci/init-ci-scan';
import { ping } from '../fn/ci/ping';
import { Ping$Params } from '../fn/ci/ping';
import { updateCiScan } from '../fn/ci/update-ci-scan';
import { UpdateCiScan$Params } from '../fn/ci/update-ci-scan';
import { uploadCiDependency } from '../fn/ci/upload-ci-dependency';
import { UploadCiDependency$Params } from '../fn/ci/upload-ci-dependency';
import { uploadCiFinding } from '../fn/ci/upload-ci-finding';
import { UploadCiFinding$Params } from '../fn/ci/upload-ci-finding';

@Injectable({ providedIn: 'root' })
export class CiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `ping()` */
  static readonly PingPath = '/api/ci/ping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ping()` instead.
   *
   * This method doesn't expect any request body.
   */
  ping$Response(params?: Ping$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return ping(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ping$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ping(params?: Ping$Params, context?: HttpContext): Observable<string> {
    return this.ping$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `initCiScan()` */
  static readonly InitCiScanPath = '/api/ci/scan';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initCiScan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initCiScan$Response(params?: InitCiScan$Params, context?: HttpContext): Observable<StrictHttpResponse<CiScanInfo>> {
    return initCiScan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initCiScan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initCiScan(params?: InitCiScan$Params, context?: HttpContext): Observable<CiScanInfo> {
    return this.initCiScan$Response(params, context).pipe(
      map((r: StrictHttpResponse<CiScanInfo>): CiScanInfo => r.body)
    );
  }

  /** Path part for operation `updateCiScan()` */
  static readonly UpdateCiScanPath = '/api/ci/scan/{scanId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCiScan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCiScan$Response(params: UpdateCiScan$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCiScan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCiScan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCiScan(params: UpdateCiScan$Params, context?: HttpContext): Observable<void> {
    return this.updateCiScan$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadCiFinding()` */
  static readonly UploadCiFindingPath = '/api/ci/finding';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadCiFinding()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadCiFinding$Response(params?: UploadCiFinding$Params, context?: HttpContext): Observable<StrictHttpResponse<CiUploadFindingResponse>> {
    return uploadCiFinding(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadCiFinding$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadCiFinding(params?: UploadCiFinding$Params, context?: HttpContext): Observable<CiUploadFindingResponse> {
    return this.uploadCiFinding$Response(params, context).pipe(
      map((r: StrictHttpResponse<CiUploadFindingResponse>): CiUploadFindingResponse => r.body)
    );
  }

  /** Path part for operation `uploadCiDependency()` */
  static readonly UploadCiDependencyPath = '/api/ci/dependency';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadCiDependency()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadCiDependency$Response(params?: UploadCiDependency$Params, context?: HttpContext): Observable<StrictHttpResponse<CiUploadDependencyResponse>> {
    return uploadCiDependency(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadCiDependency$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadCiDependency(params?: UploadCiDependency$Params, context?: HttpContext): Observable<CiUploadDependencyResponse> {
    return this.uploadCiDependency$Response(params, context).pipe(
      map((r: StrictHttpResponse<CiUploadDependencyResponse>): CiUploadDependencyResponse => r.body)
    );
  }

}
