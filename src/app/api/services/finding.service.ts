/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { FindingActivityPage } from '../models/finding-activity-page';
import { FindingDetail } from '../models/finding-detail';
import { getFinding } from '../fn/finding/get-finding';
import { GetFinding$Params } from '../fn/finding/get-finding';
import { getFindingActivities } from '../fn/finding/get-finding-activities';
import { GetFindingActivities$Params } from '../fn/finding/get-finding-activities';
import { updateFinding } from '../fn/finding/update-finding';
import { UpdateFinding$Params } from '../fn/finding/update-finding';

@Injectable({ providedIn: 'root' })
export class FindingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFinding()` */
  static readonly GetFindingPath = '/api/finding/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFinding()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFinding$Response(params: GetFinding$Params, context?: HttpContext): Observable<StrictHttpResponse<FindingDetail>> {
    return getFinding(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFinding$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFinding(params: GetFinding$Params, context?: HttpContext): Observable<FindingDetail> {
    return this.getFinding$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindingDetail>): FindingDetail => r.body)
    );
  }

  /** Path part for operation `updateFinding()` */
  static readonly UpdateFindingPath = '/api/finding/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFinding()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFinding$Response(params: UpdateFinding$Params, context?: HttpContext): Observable<StrictHttpResponse<FindingDetail>> {
    return updateFinding(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFinding$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFinding(params: UpdateFinding$Params, context?: HttpContext): Observable<FindingDetail> {
    return this.updateFinding$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindingDetail>): FindingDetail => r.body)
    );
  }

  /** Path part for operation `getFindingActivities()` */
  static readonly GetFindingActivitiesPath = '/api/finding/{id}/activity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFindingActivities()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getFindingActivities$Response(params: GetFindingActivities$Params, context?: HttpContext): Observable<StrictHttpResponse<FindingActivityPage>> {
    return getFindingActivities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFindingActivities$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getFindingActivities(params: GetFindingActivities$Params, context?: HttpContext): Observable<FindingActivityPage> {
    return this.getFindingActivities$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindingActivityPage>): FindingActivityPage => r.body)
    );
  }

}
