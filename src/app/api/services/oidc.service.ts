/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { loginOidc } from '../fn/oidc/login-oidc';
import { LoginOidc$Params } from '../fn/oidc/login-oidc';

@Injectable({ providedIn: 'root' })
export class OidcService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `loginOidc()` */
  static readonly LoginOidcPath = '/api/login/oidc';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginOidc()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginOidc$Response(params?: LoginOidc$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return loginOidc(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginOidc$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginOidc(params?: LoginOidc$Params, context?: HttpContext): Observable<void> {
    return this.loginOidc$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
