/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMember } from '../fn/project/add-member';
import { AddMember$Params } from '../fn/project/add-member';
import { createProjectTicket } from '../fn/project/create-project-ticket';
import { CreateProjectTicket$Params } from '../fn/project/create-project-ticket';
import { deleteProjectMember } from '../fn/project/delete-project-member';
import { DeleteProjectMember$Params } from '../fn/project/delete-project-member';
import { deleteProjectTicket } from '../fn/project/delete-project-ticket';
import { DeleteProjectTicket$Params } from '../fn/project/delete-project-ticket';
import { export$Any } from '../fn/project/export-any';
import { Export$Any$Params } from '../fn/project/export-any';
import { export$Json } from '../fn/project/export-json';
import { Export$Json$Params } from '../fn/project/export-json';
import { getDefaultBranchesProject } from '../fn/project/get-default-branches-project';
import { GetDefaultBranchesProject$Params } from '../fn/project/get-default-branches-project';
import { getIntegrationProject } from '../fn/project/get-integration-project';
import { GetIntegrationProject$Params } from '../fn/project/get-integration-project';
import { getJiraIntegrationProject } from '../fn/project/get-jira-integration-project';
import { GetJiraIntegrationProject$Params } from '../fn/project/get-jira-integration-project';
import { getMailIntegrationProject } from '../fn/project/get-mail-integration-project';
import { GetMailIntegrationProject$Params } from '../fn/project/get-mail-integration-project';
import { getProjectCommits } from '../fn/project/get-project-commits';
import { GetProjectCommits$Params } from '../fn/project/get-project-commits';
import { getProjectCommitScanSummary } from '../fn/project/get-project-commit-scan-summary';
import { GetProjectCommitScanSummary$Params } from '../fn/project/get-project-commit-scan-summary';
import { getProjectInfo } from '../fn/project/get-project-info';
import { GetProjectInfo$Params } from '../fn/project/get-project-info';
import { getProjectPackageDetail } from '../fn/project/get-project-package-detail';
import { GetProjectPackageDetail$Params } from '../fn/project/get-project-package-detail';
import { getProjectPackages } from '../fn/project/get-project-packages';
import { GetProjectPackages$Params } from '../fn/project/get-project-packages';
import { getProjects } from '../fn/project/get-projects';
import { GetProjects$Params } from '../fn/project/get-projects';
import { getProjectScans } from '../fn/project/get-project-scans';
import { GetProjectScans$Params } from '../fn/project/get-project-scans';
import { getProjectStatistic } from '../fn/project/get-project-statistic';
import { GetProjectStatistic$Params } from '../fn/project/get-project-statistic';
import { getProjectUsers } from '../fn/project/get-project-users';
import { GetProjectUsers$Params } from '../fn/project/get-project-users';
import { getTeamsIntegrationProject } from '../fn/project/get-teams-integration-project';
import { GetTeamsIntegrationProject$Params } from '../fn/project/get-teams-integration-project';
import { getThresholdProject } from '../fn/project/get-threshold-project';
import { GetThresholdProject$Params } from '../fn/project/get-threshold-project';
import { JiraProjectSettingResponse } from '../models/jira-project-setting-response';
import { ProjectAlertEvent } from '../models/project-alert-event';
import { ProjectCommitScanSummaryPage } from '../models/project-commit-scan-summary-page';
import { ProjectCommitSummary } from '../models/project-commit-summary';
import { ProjectInfo } from '../models/project-info';
import { ProjectIntegration } from '../models/project-integration';
import { ProjectMember } from '../models/project-member';
import { ProjectMemberPage } from '../models/project-member-page';
import { ProjectPackageDetailResponse } from '../models/project-package-detail-response';
import { ProjectPackagePage } from '../models/project-package-page';
import { ProjectScanPage } from '../models/project-scan-page';
import { ProjectStatistics } from '../models/project-statistics';
import { ProjectSummaryPage } from '../models/project-summary-page';
import { TeamsProjectSetting } from '../models/teams-project-setting';
import { testTeamsIntegrationProject } from '../fn/project/test-teams-integration-project';
import { TestTeamsIntegrationProject$Params } from '../fn/project/test-teams-integration-project';
import { ThresholdProject } from '../models/threshold-project';
import { Tickets } from '../models/tickets';
import { updateDefaultBranchesProject } from '../fn/project/update-default-branches-project';
import { UpdateDefaultBranchesProject$Params } from '../fn/project/update-default-branches-project';
import { updateJiraIntegrationProject } from '../fn/project/update-jira-integration-project';
import { UpdateJiraIntegrationProject$Params } from '../fn/project/update-jira-integration-project';
import { updateMailIntegrationProject } from '../fn/project/update-mail-integration-project';
import { UpdateMailIntegrationProject$Params } from '../fn/project/update-mail-integration-project';
import { updateProjectMember } from '../fn/project/update-project-member';
import { UpdateProjectMember$Params } from '../fn/project/update-project-member';
import { updateProjectPackage } from '../fn/project/update-project-package';
import { UpdateProjectPackage$Params } from '../fn/project/update-project-package';
import { updateTeamsIntegrationProject } from '../fn/project/update-teams-integration-project';
import { UpdateTeamsIntegrationProject$Params } from '../fn/project/update-teams-integration-project';
import { updateThresholdProject } from '../fn/project/update-threshold-project';
import { UpdateThresholdProject$Params } from '../fn/project/update-threshold-project';

@Injectable({ providedIn: 'root' })
export class ProjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProjects()` */
  static readonly GetProjectsPath = '/api/project/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjects()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjects$Response(params?: GetProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectSummaryPage>> {
    return getProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjects$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjects(params?: GetProjects$Params, context?: HttpContext): Observable<ProjectSummaryPage> {
    return this.getProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectSummaryPage>): ProjectSummaryPage => r.body)
    );
  }

  /** Path part for operation `getProjectInfo()` */
  static readonly GetProjectInfoPath = '/api/project/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectInfo$Response(params: GetProjectInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectInfo>> {
    return getProjectInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectInfo(params: GetProjectInfo$Params, context?: HttpContext): Observable<ProjectInfo> {
    return this.getProjectInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectInfo>): ProjectInfo => r.body)
    );
  }

  /** Path part for operation `getProjectScans()` */
  static readonly GetProjectScansPath = '/api/project/{projectId}/scan/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectScans()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectScans$Response(params: GetProjectScans$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectScanPage>> {
    return getProjectScans(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectScans$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectScans(params: GetProjectScans$Params, context?: HttpContext): Observable<ProjectScanPage> {
    return this.getProjectScans$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectScanPage>): ProjectScanPage => r.body)
    );
  }

  /** Path part for operation `getProjectStatistic()` */
  static readonly GetProjectStatisticPath = '/api/project/{projectId}/statistic';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectStatistic()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectStatistic$Response(params: GetProjectStatistic$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectStatistics>> {
    return getProjectStatistic(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectStatistic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectStatistic(params: GetProjectStatistic$Params, context?: HttpContext): Observable<ProjectStatistics> {
    return this.getProjectStatistic$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectStatistics>): ProjectStatistics => r.body)
    );
  }

  /** Path part for operation `getProjectCommitScanSummary()` */
  static readonly GetProjectCommitScanSummaryPath = '/api/project/{projectId}/commit/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectCommitScanSummary()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectCommitScanSummary$Response(params: GetProjectCommitScanSummary$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectCommitScanSummaryPage>> {
    return getProjectCommitScanSummary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectCommitScanSummary$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectCommitScanSummary(params: GetProjectCommitScanSummary$Params, context?: HttpContext): Observable<ProjectCommitScanSummaryPage> {
    return this.getProjectCommitScanSummary$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectCommitScanSummaryPage>): ProjectCommitScanSummaryPage => r.body)
    );
  }

  /** Path part for operation `getProjectCommits()` */
  static readonly GetProjectCommitsPath = '/api/project/{projectId}/commit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectCommits()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectCommits$Response(params: GetProjectCommits$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProjectCommitSummary>>> {
    return getProjectCommits(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectCommits$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectCommits(params: GetProjectCommits$Params, context?: HttpContext): Observable<Array<ProjectCommitSummary>> {
    return this.getProjectCommits$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProjectCommitSummary>>): Array<ProjectCommitSummary> => r.body)
    );
  }

  /** Path part for operation `getProjectPackages()` */
  static readonly GetProjectPackagesPath = '/api/project/{projectId}/package/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectPackages()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectPackages$Response(params: GetProjectPackages$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectPackagePage>> {
    return getProjectPackages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectPackages$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectPackages(params: GetProjectPackages$Params, context?: HttpContext): Observable<ProjectPackagePage> {
    return this.getProjectPackages$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectPackagePage>): ProjectPackagePage => r.body)
    );
  }

  /** Path part for operation `getProjectPackageDetail()` */
  static readonly GetProjectPackageDetailPath = '/api/project/{projectId}/package/{packageId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectPackageDetail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectPackageDetail$Response(params: GetProjectPackageDetail$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectPackageDetailResponse>> {
    return getProjectPackageDetail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectPackageDetail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectPackageDetail(params: GetProjectPackageDetail$Params, context?: HttpContext): Observable<ProjectPackageDetailResponse> {
    return this.getProjectPackageDetail$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectPackageDetailResponse>): ProjectPackageDetailResponse => r.body)
    );
  }

  /** Path part for operation `updateProjectPackage()` */
  static readonly UpdateProjectPackagePath = '/api/project/{projectId}/package/{packageId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProjectPackage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectPackage$Response(params: UpdateProjectPackage$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectPackageDetailResponse>> {
    return updateProjectPackage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProjectPackage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectPackage(params: UpdateProjectPackage$Params, context?: HttpContext): Observable<ProjectPackageDetailResponse> {
    return this.updateProjectPackage$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectPackageDetailResponse>): ProjectPackageDetailResponse => r.body)
    );
  }

  /** Path part for operation `createProjectTicket()` */
  static readonly CreateProjectTicketPath = '/api/project/{projectId}/package/{packageId}/ticket';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProjectTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  createProjectTicket$Response(params: CreateProjectTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<Tickets>> {
    return createProjectTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProjectTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createProjectTicket(params: CreateProjectTicket$Params, context?: HttpContext): Observable<Tickets> {
    return this.createProjectTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tickets>): Tickets => r.body)
    );
  }

  /** Path part for operation `deleteProjectTicket()` */
  static readonly DeleteProjectTicketPath = '/api/project/{projectId}/package/{packageId}/ticket';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProjectTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectTicket$Response(params: DeleteProjectTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteProjectTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProjectTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectTicket(params: DeleteProjectTicket$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteProjectTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getProjectUsers()` */
  static readonly GetProjectUsersPath = '/api/project/{projectId}/member/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectUsers()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectUsers$Response(params: GetProjectUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectMemberPage>> {
    return getProjectUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectUsers$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getProjectUsers(params: GetProjectUsers$Params, context?: HttpContext): Observable<ProjectMemberPage> {
    return this.getProjectUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectMemberPage>): ProjectMemberPage => r.body)
    );
  }

  /** Path part for operation `addMember()` */
  static readonly AddMemberPath = '/api/project/{projectId}/member';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMember$Response(params: AddMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectMember>> {
    return addMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMember(params: AddMember$Params, context?: HttpContext): Observable<ProjectMember> {
    return this.addMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectMember>): ProjectMember => r.body)
    );
  }

  /** Path part for operation `deleteProjectMember()` */
  static readonly DeleteProjectMemberPath = '/api/project/{projectId}/member/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProjectMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectMember$Response(params: DeleteProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProjectMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProjectMember(params: DeleteProjectMember$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `updateProjectMember()` */
  static readonly UpdateProjectMemberPath = '/api/project/{projectId}/member/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProjectMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectMember$Response(params: UpdateProjectMember$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectMember>> {
    return updateProjectMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProjectMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProjectMember(params: UpdateProjectMember$Params, context?: HttpContext): Observable<ProjectMember> {
    return this.updateProjectMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectMember>): ProjectMember => r.body)
    );
  }

  /** Path part for operation `getThresholdProject()` */
  static readonly GetThresholdProjectPath = '/api/project/{projectId}/threshold';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getThresholdProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getThresholdProject$Response(params: GetThresholdProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ThresholdProject>> {
    return getThresholdProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getThresholdProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getThresholdProject(params: GetThresholdProject$Params, context?: HttpContext): Observable<ThresholdProject> {
    return this.getThresholdProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ThresholdProject>): ThresholdProject => r.body)
    );
  }

  /** Path part for operation `updateThresholdProject()` */
  static readonly UpdateThresholdProjectPath = '/api/project/{projectId}/threshold';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateThresholdProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateThresholdProject$Response(params: UpdateThresholdProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateThresholdProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateThresholdProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateThresholdProject(params: UpdateThresholdProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateThresholdProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getIntegrationProject()` */
  static readonly GetIntegrationProjectPath = '/api/project/{projectId}/integration';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getIntegrationProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIntegrationProject$Response(params: GetIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectIntegration>> {
    return getIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getIntegrationProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIntegrationProject(params: GetIntegrationProject$Params, context?: HttpContext): Observable<ProjectIntegration> {
    return this.getIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectIntegration>): ProjectIntegration => r.body)
    );
  }

  /** Path part for operation `getJiraIntegrationProject()` */
  static readonly GetJiraIntegrationProjectPath = '/api/project/{projectId}/integration/jira';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJiraIntegrationProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraIntegrationProject$Response(params: GetJiraIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<JiraProjectSettingResponse>> {
    return getJiraIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJiraIntegrationProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraIntegrationProject(params: GetJiraIntegrationProject$Params, context?: HttpContext): Observable<JiraProjectSettingResponse> {
    return this.getJiraIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<JiraProjectSettingResponse>): JiraProjectSettingResponse => r.body)
    );
  }

  /** Path part for operation `updateJiraIntegrationProject()` */
  static readonly UpdateJiraIntegrationProjectPath = '/api/project/{projectId}/integration/jira';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateJiraIntegrationProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJiraIntegrationProject$Response(params: UpdateJiraIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateJiraIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateJiraIntegrationProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJiraIntegrationProject(params: UpdateJiraIntegrationProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateJiraIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getTeamsIntegrationProject()` */
  static readonly GetTeamsIntegrationProjectPath = '/api/project/{projectId}/integration/teams';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamsIntegrationProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsIntegrationProject$Response(params: GetTeamsIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamsProjectSetting>> {
    return getTeamsIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamsIntegrationProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsIntegrationProject(params: GetTeamsIntegrationProject$Params, context?: HttpContext): Observable<TeamsProjectSetting> {
    return this.getTeamsIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamsProjectSetting>): TeamsProjectSetting => r.body)
    );
  }

  /** Path part for operation `updateTeamsIntegrationProject()` */
  static readonly UpdateTeamsIntegrationProjectPath = '/api/project/{projectId}/integration/teams';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeamsIntegrationProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamsIntegrationProject$Response(params: UpdateTeamsIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateTeamsIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeamsIntegrationProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamsIntegrationProject(params: UpdateTeamsIntegrationProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateTeamsIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `testTeamsIntegrationProject()` */
  static readonly TestTeamsIntegrationProjectPath = '/api/project/{projectId}/integration/teams/test';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `testTeamsIntegrationProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  testTeamsIntegrationProject$Response(params: TestTeamsIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return testTeamsIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `testTeamsIntegrationProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  testTeamsIntegrationProject(params: TestTeamsIntegrationProject$Params, context?: HttpContext): Observable<boolean> {
    return this.testTeamsIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getMailIntegrationProject()` */
  static readonly GetMailIntegrationProjectPath = '/api/project/{projectId}/integration/mail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMailIntegrationProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMailIntegrationProject$Response(params: GetMailIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<ProjectAlertEvent>> {
    return getMailIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMailIntegrationProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMailIntegrationProject(params: GetMailIntegrationProject$Params, context?: HttpContext): Observable<ProjectAlertEvent> {
    return this.getMailIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProjectAlertEvent>): ProjectAlertEvent => r.body)
    );
  }

  /** Path part for operation `updateMailIntegrationProject()` */
  static readonly UpdateMailIntegrationProjectPath = '/api/project/{projectId}/integration/mail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMailIntegrationProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMailIntegrationProject$Response(params: UpdateMailIntegrationProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateMailIntegrationProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMailIntegrationProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMailIntegrationProject(params: UpdateMailIntegrationProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateMailIntegrationProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getDefaultBranchesProject()` */
  static readonly GetDefaultBranchesProjectPath = '/api/project/{projectId}/defaultBranch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDefaultBranchesProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDefaultBranchesProject$Response(params: GetDefaultBranchesProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getDefaultBranchesProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDefaultBranchesProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDefaultBranchesProject(params: GetDefaultBranchesProject$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getDefaultBranchesProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `updateDefaultBranchesProject()` */
  static readonly UpdateDefaultBranchesProjectPath = '/api/project/{projectId}/defaultBranch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDefaultBranchesProject()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDefaultBranchesProject$Response(params: UpdateDefaultBranchesProject$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return updateDefaultBranchesProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDefaultBranchesProject$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDefaultBranchesProject(params: UpdateDefaultBranchesProject$Params, context?: HttpContext): Observable<boolean> {
    return this.updateDefaultBranchesProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `export()` */
  static readonly ExportPath = '/api/project/{projectId}/export';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `export$Any()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  export$Any$Response(params: Export$Any$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return export$Any(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `export$Any$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  export$Any(params: Export$Any$Params, context?: HttpContext): Observable<Blob> {
    return this.export$Any$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `export$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  export$Json$Response(params: Export$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return export$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `export$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  export$Json(params: Export$Json$Params, context?: HttpContext): Observable<Blob> {
    return this.export$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
