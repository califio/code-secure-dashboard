/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createUser } from '../fn/user/create-user';
import { CreateUser$Params } from '../fn/user/create-user';
import { getUserById } from '../fn/user/get-user-by-id';
import { GetUserById$Params } from '../fn/user/get-user-by-id';
import { getUserDetailByFilter } from '../fn/user/get-user-detail-by-filter';
import { GetUserDetailByFilter$Params } from '../fn/user/get-user-detail-by-filter';
import { getUserSummaryByFilter } from '../fn/user/get-user-summary-by-filter';
import { GetUserSummaryByFilter$Params } from '../fn/user/get-user-summary-by-filter';
import { listProjectManagerUser } from '../fn/user/list-project-manager-user';
import { ListProjectManagerUser$Params } from '../fn/user/list-project-manager-user';
import { sendConfirmEmail } from '../fn/user/send-confirm-email';
import { SendConfirmEmail$Params } from '../fn/user/send-confirm-email';
import { updateUser } from '../fn/user/update-user';
import { UpdateUser$Params } from '../fn/user/update-user';
import { UserDetail } from '../models/user-detail';
import { UserDetailPage } from '../models/user-detail-page';
import { UserSummary } from '../models/user-summary';
import { UserSummaryPage } from '../models/user-summary-page';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUserSummaryByFilter()` */
  static readonly GetUserSummaryByFilterPath = '/api/user/public';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserSummaryByFilter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserSummaryByFilter$Response(params?: GetUserSummaryByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<UserSummaryPage>> {
    return getUserSummaryByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserSummaryByFilter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserSummaryByFilter(params?: GetUserSummaryByFilter$Params, context?: HttpContext): Observable<UserSummaryPage> {
    return this.getUserSummaryByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserSummaryPage>): UserSummaryPage => r.body)
    );
  }

  /** Path part for operation `listProjectManagerUser()` */
  static readonly ListProjectManagerUserPath = '/api/user/project-manager';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listProjectManagerUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  listProjectManagerUser$Response(params?: ListProjectManagerUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserSummary>>> {
    return listProjectManagerUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listProjectManagerUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listProjectManagerUser(params?: ListProjectManagerUser$Params, context?: HttpContext): Observable<Array<UserSummary>> {
    return this.listProjectManagerUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserSummary>>): Array<UserSummary> => r.body)
    );
  }

  /** Path part for operation `getUserDetailByFilter()` */
  static readonly GetUserDetailByFilterPath = '/api/user/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserDetailByFilter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserDetailByFilter$Response(params?: GetUserDetailByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDetailPage>> {
    return getUserDetailByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserDetailByFilter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserDetailByFilter(params?: GetUserDetailByFilter$Params, context?: HttpContext): Observable<UserDetailPage> {
    return this.getUserDetailByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDetailPage>): UserDetailPage => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/api/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDetail>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<UserDetail> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDetail>): UserDetail => r.body)
    );
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/api/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Response(params: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDetail>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser(params: UpdateUser$Params, context?: HttpContext): Observable<UserDetail> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDetail>): UserDetail => r.body)
    );
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/api/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params?: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDetail>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params?: CreateUser$Params, context?: HttpContext): Observable<UserDetail> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDetail>): UserDetail => r.body)
    );
  }

  /** Path part for operation `sendConfirmEmail()` */
  static readonly SendConfirmEmailPath = '/api/user/{userId}/send-confirm-email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendConfirmEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendConfirmEmail$Response(params: SendConfirmEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return sendConfirmEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendConfirmEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendConfirmEmail(params: SendConfirmEmail$Params, context?: HttpContext): Observable<void> {
    return this.sendConfirmEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
