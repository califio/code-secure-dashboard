/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CiTokens } from '../models/ci-tokens';
import { createCiToken } from '../fn/ci-token/create-ci-token';
import { CreateCiToken$Params } from '../fn/ci-token/create-ci-token';
import { deleteCiToken } from '../fn/ci-token/delete-ci-token';
import { DeleteCiToken$Params } from '../fn/ci-token/delete-ci-token';
import { getCiTokens } from '../fn/ci-token/get-ci-tokens';
import { GetCiTokens$Params } from '../fn/ci-token/get-ci-tokens';

@Injectable({ providedIn: 'root' })
export class CiTokenService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCiTokens()` */
  static readonly GetCiTokensPath = '/api/admin/ci-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCiTokens()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCiTokens$Response(params?: GetCiTokens$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CiTokens>>> {
    return getCiTokens(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCiTokens$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCiTokens(params?: GetCiTokens$Params, context?: HttpContext): Observable<Array<CiTokens>> {
    return this.getCiTokens$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CiTokens>>): Array<CiTokens> => r.body)
    );
  }

  /** Path part for operation `createCiToken()` */
  static readonly CreateCiTokenPath = '/api/admin/ci-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCiToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCiToken$Response(params?: CreateCiToken$Params, context?: HttpContext): Observable<StrictHttpResponse<CiTokens>> {
    return createCiToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCiToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCiToken(params?: CreateCiToken$Params, context?: HttpContext): Observable<CiTokens> {
    return this.createCiToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<CiTokens>): CiTokens => r.body)
    );
  }

  /** Path part for operation `deleteCiToken()` */
  static readonly DeleteCiTokenPath = '/api/admin/ci-token/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCiToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCiToken$Response(params: DeleteCiToken$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteCiToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCiToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCiToken(params: DeleteCiToken$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteCiToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
