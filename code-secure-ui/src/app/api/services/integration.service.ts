/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getJiraIssueTypes } from '../fn/integration/get-jira-issue-types';
import { GetJiraIssueTypes$Params } from '../fn/integration/get-jira-issue-types';
import { getJiraProjects } from '../fn/integration/get-jira-projects';
import { GetJiraProjects$Params } from '../fn/integration/get-jira-projects';
import { getJiraSetting } from '../fn/integration/get-jira-setting';
import { GetJiraSetting$Params } from '../fn/integration/get-jira-setting';
import { getTeamsSetting } from '../fn/integration/get-teams-setting';
import { GetTeamsSetting$Params } from '../fn/integration/get-teams-setting';
import { getTicketTrackers } from '../fn/integration/get-ticket-trackers';
import { GetTicketTrackers$Params } from '../fn/integration/get-ticket-trackers';
import { JiraProject } from '../models/jira-project';
import { JiraSetting } from '../models/jira-setting';
import { TeamsSetting } from '../models/teams-setting';
import { testTeamsSetting } from '../fn/integration/test-teams-setting';
import { TestTeamsSetting$Params } from '../fn/integration/test-teams-setting';
import { TicketTracker } from '../models/ticket-tracker';
import { updateJiraSetting } from '../fn/integration/update-jira-setting';
import { UpdateJiraSetting$Params } from '../fn/integration/update-jira-setting';
import { updateTeamsSetting } from '../fn/integration/update-teams-setting';
import { UpdateTeamsSetting$Params } from '../fn/integration/update-teams-setting';

@Injectable({ providedIn: 'root' })
export class IntegrationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTeamsSetting()` */
  static readonly GetTeamsSettingPath = '/api/integration/teams';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamsSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsSetting$Response(params?: GetTeamsSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamsSetting>> {
    return getTeamsSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamsSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsSetting(params?: GetTeamsSetting$Params, context?: HttpContext): Observable<TeamsSetting> {
    return this.getTeamsSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamsSetting>): TeamsSetting => r.body)
    );
  }

  /** Path part for operation `updateTeamsSetting()` */
  static readonly UpdateTeamsSettingPath = '/api/integration/teams';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeamsSetting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamsSetting$Response(params?: UpdateTeamsSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateTeamsSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeamsSetting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamsSetting(params?: UpdateTeamsSetting$Params, context?: HttpContext): Observable<void> {
    return this.updateTeamsSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `testTeamsSetting()` */
  static readonly TestTeamsSettingPath = '/api/integration/teams/test';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `testTeamsSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  testTeamsSetting$Response(params?: TestTeamsSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return testTeamsSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `testTeamsSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  testTeamsSetting(params?: TestTeamsSetting$Params, context?: HttpContext): Observable<void> {
    return this.testTeamsSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getJiraSetting()` */
  static readonly GetJiraSettingPath = '/api/integration/jira';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJiraSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraSetting$Response(params?: GetJiraSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<JiraSetting>> {
    return getJiraSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJiraSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraSetting(params?: GetJiraSetting$Params, context?: HttpContext): Observable<JiraSetting> {
    return this.getJiraSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<JiraSetting>): JiraSetting => r.body)
    );
  }

  /** Path part for operation `updateJiraSetting()` */
  static readonly UpdateJiraSettingPath = '/api/integration/jira';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateJiraSetting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJiraSetting$Response(params?: UpdateJiraSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateJiraSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateJiraSetting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJiraSetting(params?: UpdateJiraSetting$Params, context?: HttpContext): Observable<void> {
    return this.updateJiraSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getJiraProjects()` */
  static readonly GetJiraProjectsPath = '/api/integration/jira/projects';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJiraProjects()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getJiraProjects$Response(params?: GetJiraProjects$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<JiraProject>>> {
    return getJiraProjects(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJiraProjects$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getJiraProjects(params?: GetJiraProjects$Params, context?: HttpContext): Observable<Array<JiraProject>> {
    return this.getJiraProjects$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<JiraProject>>): Array<JiraProject> => r.body)
    );
  }

  /** Path part for operation `getJiraIssueTypes()` */
  static readonly GetJiraIssueTypesPath = '/api/integration/jira/issue-types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJiraIssueTypes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraIssueTypes$Response(params: GetJiraIssueTypes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getJiraIssueTypes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJiraIssueTypes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJiraIssueTypes(params: GetJiraIssueTypes$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getJiraIssueTypes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getTicketTrackers()` */
  static readonly GetTicketTrackersPath = '/api/integration/ticket-trackers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTicketTrackers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketTrackers$Response(params?: GetTicketTrackers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketTracker>>> {
    return getTicketTrackers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTicketTrackers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketTrackers(params?: GetTicketTrackers$Params, context?: HttpContext): Observable<Array<TicketTracker>> {
    return this.getTicketTrackers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketTracker>>): Array<TicketTracker> => r.body)
    );
  }

}
