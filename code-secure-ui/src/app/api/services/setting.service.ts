/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AuthSetting } from '../models/auth-setting';
import { getAuthSetting } from '../fn/setting/get-auth-setting';
import { GetAuthSetting$Params } from '../fn/setting/get-auth-setting';
import { getSlaSetting } from '../fn/setting/get-sla-setting';
import { GetSlaSetting$Params } from '../fn/setting/get-sla-setting';
import { getSmtpSetting } from '../fn/setting/get-smtp-setting';
import { GetSmtpSetting$Params } from '../fn/setting/get-smtp-setting';
import { SlaSetting } from '../models/sla-setting';
import { SmtpSetting } from '../models/smtp-setting';
import { testSmtpSetting } from '../fn/setting/test-smtp-setting';
import { TestSmtpSetting$Params } from '../fn/setting/test-smtp-setting';
import { updateAuthSetting } from '../fn/setting/update-auth-setting';
import { UpdateAuthSetting$Params } from '../fn/setting/update-auth-setting';
import { updateSlaSetting } from '../fn/setting/update-sla-setting';
import { UpdateSlaSetting$Params } from '../fn/setting/update-sla-setting';
import { updateSmtpSetting } from '../fn/setting/update-smtp-setting';
import { UpdateSmtpSetting$Params } from '../fn/setting/update-smtp-setting';

@Injectable({ providedIn: 'root' })
export class SettingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAuthSetting()` */
  static readonly GetAuthSettingPath = '/api/setting/auth';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAuthSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAuthSetting$Response(params?: GetAuthSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthSetting>> {
    return getAuthSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAuthSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAuthSetting(params?: GetAuthSetting$Params, context?: HttpContext): Observable<AuthSetting> {
    return this.getAuthSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthSetting>): AuthSetting => r.body)
    );
  }

  /** Path part for operation `updateAuthSetting()` */
  static readonly UpdateAuthSettingPath = '/api/setting/auth';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAuthSetting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAuthSetting$Response(params?: UpdateAuthSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateAuthSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAuthSetting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAuthSetting(params?: UpdateAuthSetting$Params, context?: HttpContext): Observable<void> {
    return this.updateAuthSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getSlaSetting()` */
  static readonly GetSlaSettingPath = '/api/setting/sla';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSlaSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSlaSetting$Response(params?: GetSlaSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<SlaSetting>> {
    return getSlaSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSlaSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSlaSetting(params?: GetSlaSetting$Params, context?: HttpContext): Observable<SlaSetting> {
    return this.getSlaSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<SlaSetting>): SlaSetting => r.body)
    );
  }

  /** Path part for operation `updateSlaSetting()` */
  static readonly UpdateSlaSettingPath = '/api/setting/sla';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSlaSetting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSlaSetting$Response(params?: UpdateSlaSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateSlaSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSlaSetting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSlaSetting(params?: UpdateSlaSetting$Params, context?: HttpContext): Observable<void> {
    return this.updateSlaSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getSmtpSetting()` */
  static readonly GetSmtpSettingPath = '/api/setting/smtp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSmtpSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSmtpSetting$Response(params?: GetSmtpSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<SmtpSetting>> {
    return getSmtpSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSmtpSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSmtpSetting(params?: GetSmtpSetting$Params, context?: HttpContext): Observable<SmtpSetting> {
    return this.getSmtpSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<SmtpSetting>): SmtpSetting => r.body)
    );
  }

  /** Path part for operation `updateSmtpSetting()` */
  static readonly UpdateSmtpSettingPath = '/api/setting/smtp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSmtpSetting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSmtpSetting$Response(params?: UpdateSmtpSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateSmtpSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSmtpSetting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSmtpSetting(params?: UpdateSmtpSetting$Params, context?: HttpContext): Observable<void> {
    return this.updateSmtpSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `testSmtpSetting()` */
  static readonly TestSmtpSettingPath = '/api/setting/smtp/test';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `testSmtpSetting()` instead.
   *
   * This method doesn't expect any request body.
   */
  testSmtpSetting$Response(params?: TestSmtpSetting$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return testSmtpSetting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `testSmtpSetting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  testSmtpSetting(params?: TestSmtpSetting$Params, context?: HttpContext): Observable<boolean> {
    return this.testSmtpSetting$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
