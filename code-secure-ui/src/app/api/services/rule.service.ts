/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getRuleByFilter } from '../fn/rule/get-rule-by-filter';
import { GetRuleByFilter$Params } from '../fn/rule/get-rule-by-filter';
import { getRuleScanners } from '../fn/rule/get-rule-scanners';
import { GetRuleScanners$Params } from '../fn/rule/get-rule-scanners';
import { RuleInfoPage } from '../models/rule-info-page';
import { Scanners } from '../models/scanners';
import { syncRules } from '../fn/rule/sync-rules';
import { SyncRules$Params } from '../fn/rule/sync-rules';
import { updateRule } from '../fn/rule/update-rule';
import { UpdateRule$Params } from '../fn/rule/update-rule';

@Injectable({ providedIn: 'root' })
export class RuleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getRuleByFilter()` */
  static readonly GetRuleByFilterPath = '/api/rule/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRuleByFilter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getRuleByFilter$Response(params?: GetRuleByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<RuleInfoPage>> {
    return getRuleByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRuleByFilter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getRuleByFilter(params?: GetRuleByFilter$Params, context?: HttpContext): Observable<RuleInfoPage> {
    return this.getRuleByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<RuleInfoPage>): RuleInfoPage => r.body)
    );
  }

  /** Path part for operation `updateRule()` */
  static readonly UpdateRulePath = '/api/rule/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRule$Response(params?: UpdateRule$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateRule(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRule(params?: UpdateRule$Params, context?: HttpContext): Observable<void> {
    return this.updateRule$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getRuleScanners()` */
  static readonly GetRuleScannersPath = '/api/rule/scanner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRuleScanners()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRuleScanners$Response(params?: GetRuleScanners$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Scanners>>> {
    return getRuleScanners(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRuleScanners$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRuleScanners(params?: GetRuleScanners$Params, context?: HttpContext): Observable<Array<Scanners>> {
    return this.getRuleScanners$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Scanners>>): Array<Scanners> => r.body)
    );
  }

  /** Path part for operation `syncRules()` */
  static readonly SyncRulesPath = '/api/rule/sync';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `syncRules()` instead.
   *
   * This method doesn't expect any request body.
   */
  syncRules$Response(params?: SyncRules$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return syncRules(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `syncRules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  syncRules(params?: SyncRules$Params, context?: HttpContext): Observable<boolean> {
    return this.syncRules$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
